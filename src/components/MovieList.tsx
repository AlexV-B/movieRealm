import { useEffect, useRef, useState } from "react";
import axios from "axios";
import { Link, useLocation } from "react-router-dom";
import { useInView } from "react-intersection-observer";
import styles from "./movieList.module.css";
import { debounce } from "lodash";
import TopTenCarousel from "./TopTenCarousel";

const apiKey = "6079e93c1e108a319ce62e3f8c0a8ac0";

const categories = [
  { id: "Trending", label: "Trending", url: "trending/movie/week" },
  { id: "Now_playing", label: "Now Playing", url: "movie/now_playing" },
  { id: "Upcoming", label: "Upcoming", url: "movie/upcoming" },
];

const MovieList = ({
  language = "en",
  searchResults,
  category,
  selectedGenre,
}: {
  language?: string;
  searchResults: any[];
  category: string;
  selectedGenre: string | null;
}) => {
  const [movies, setMovies] = useState<any[]>([]); // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å–º—ã
  const [page, setPage] = useState(1);
  const [loading, setLoading] = useState<boolean>(false);
  const { ref, inView } = useInView({ threshold: 0.2 });
  const displayedMovies = searchResults.length > 0 ? searchResults : movies;
  const [trailerKey, setTrailerKey] = useState<string | null>(null);
  const [_showBanner, setShowBanner] = useState(true);
  const location = useLocation();
  const hasFetched = useRef(false); // üîπ –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç, –≤—ã–∑—ã–≤–∞–ª—Å—è –ª–∏ —É–∂–µ fetchMovies
  const [currentMovieId, setCurrentMovieId] = useState<string | null>(null);
  const listRef = useRef<HTMLDivElement>(null);

  const scrollToList = () => {
    listRef.current?.scrollIntoView({ behavior: "smooth" });
  };


  useEffect(() => {
    setTimeout(() => {
      window.scrollTo(0, 0);
    }, 100); // –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 100 –º—Å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  }, [location.pathname]); // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—É—Ç–∏

  useEffect(() => {
    setLoading(true); 
    setMovies([]);
    setPage(1);
    setTrailerKey(null); // üîπ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–µ–π–ª–µ—Ä –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    setShowBanner(true);
    hasFetched.current = false; // –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    scrollToList(); // üîΩ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
    setTimeout(() => {
      fetchMovies(1); // üîπ –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—á–∏—Å—Ç–∫—É, –∑–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã
  }, 50);
  }, [category, selectedGenre, language]);



  useEffect(() => {
    hasFetched.current = false;
      fetchMovies(1);
  }, [category, selectedGenre, language]);


  useEffect(() => {
    if (inView && !loading && movies.length > 0 && page < 500) {
      setPage((prev) => prev + 1);
    }
  }, [inView, loading]);

  useEffect(() => {
    if (page > 1) {
      fetchMovies(page);
    }
  }, [page]);


  const fetchMovies = async (
    page: number,
  ) => {
    console.log("–¢–µ–∫—É—â–∏–π topMovies[0] –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º:", movies[0]);
    setLoading(true);
    
    
    let url = "";
    
    if (selectedGenre) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º discover –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∂–∞–Ω—Ä–∞–º
      url = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&language=${language}&page=${page}&with_genres=${selectedGenre}`;
    } else {
      const categoryData = categories.find(
        (c) => c.id.toLowerCase() === category.toLowerCase()
      );
      console.log("–¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:", category); // ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      console.log("–ù–∞–π–¥–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ categories:", categoryData); // ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    if (!categoryData) {
      console.error("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è", category);
      setLoading(false);
      return;
    }
    
    url = `https://api.themoviedb.org/3/${categoryData.url}?api_key=${apiKey}&language=${language}&page=${page}`;
  }

    console.log("–§–æ—Ä–º–∏—Ä—É–µ–º—ã–π URL –∑–∞–ø—Ä–æ—Å–∞:", url); // ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º URL –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º


    try {
      const response = await axios.get(url);
      const newMovies = response.data.results;

      if (page === 1) {
        setMovies(newMovies.slice(0, 10));
      
        if (newMovies.length > 0) {
          const firstMovie = newMovies[0];
          
           // üîπ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
           setTimeout(async () => {
            const trailer = await fetchTrailer(firstMovie.id);
            setTrailerKey(trailer);
        }, 100);
      }
      } else {
        setMovies((prevMovies) => [
            ...prevMovies,
            ...newMovies.filter(
              (newMovie: { id: any }) =>
                !prevMovies.some((prevMovie) => prevMovie.id === newMovie.id)
            ),
          ]
        );
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å–º–æ–≤:", error);
    } finally {
      setLoading(false);
    }
  };
useEffect(() => {
    console.log("–ò–∑–º–µ–Ω–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞:", category);
}, [category]);

  const onTrailerChange = (trailer: string | null, overview: string, title: string) => {
    console.log("–¢—Ä–µ–π–ª–µ—Ä –∏–∑–º–µ–Ω–µ–Ω:", trailer);
    console.log("–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:", overview);
    console.log("–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:", title);

    setTrailerKey(trailer);
  };

  const fetchTrailer = async (movieId: string) => {
    try {
      setCurrentMovieId(movieId);
      const response = await axios.get(
        `https://api.themoviedb.org/3/movie/${movieId}/videos?api_key=${apiKey}&language=${language}`
      );
      console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ fetchTrailer:", response.data.results);
      const trailers = response.data.results.filter(
        (video: any) => video.type === "Trailer" && video.site === "YouTube"
      );

      if (trailers.length > 0) {
        if (movieId === currentMovieId) {
          setTrailerKey(trailers[0].key);
          setShowBanner(false);
        }
        return trailers[0].key;
      } else {
        if (movieId === currentMovieId) {
          setTrailerKey(null);
          setShowBanner(true);
        }
        return null;
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–π–ª–µ—Ä–∞:", error);
        setTrailerKey(null);
        setShowBanner(true);
    }
  };

  const handleScroll = debounce(() => {
    if (
      window.scrollY + window.innerHeight >=
      document.documentElement.offsetHeight - 50
    ) {
      setPage((prev) => prev + 1);
    }
  }, 200);

  useEffect(() => {
    window.addEventListener("scroll", handleScroll);
    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, []);



  return (
    <div className={styles.containerMovieList}>
      {movies.length > 0 && movies[0] && (
        <div className={styles.topFilmBlockTrailer}>
          <Link to={`/movie/${movies[0]?.id}`}>
            {trailerKey ? (
              <iframe
                className={styles.topFilmTrailer}
                src={`https://www.youtube.com/embed/${trailerKey}?autoplay=1&mute=1&loop=1&playlist=${trailerKey}`}
                title="Movie Trailer"
                frameBorder="0"
                allow="autoplay; encrypted-media"
                allowFullScreen
              ></iframe>
            ) : (
              <img
                className={styles.topFilmBanner}
                src={`https://image.tmdb.org/t/p/w1920${movies[0].backdrop_path || movies[0].poster_path}`}
                alt={movies[0].title}
              />
            )}
            <div className={styles.topFilmOverlay}></div>
            <div className={styles.topFilmDetails}>
            <h2>{movies[0]?.title}</h2>
            <p>{movies[0]?.overview}</p>
            </div>
          </Link>
        </div>
      )}

      <TopTenCarousel language={language} onTrailerChange={onTrailerChange} />

      {/* –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å–º—ã (–±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤) */}
      <div ref={listRef} className={styles.movieList}>
        {displayedMovies.map((movie, index) => {
          const isLastItem = index === displayedMovies.length - 1;
          return (
            <div
              key={movie.id}
              className={styles.movieCard}
              ref={isLastItem ? ref : null} // ref —Ç–æ–ª—å–∫–æ —É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            >
              <Link to={`/movie/${movie.id}`}>
                <img
                  src={`https://image.tmdb.org/t/p/w780${movie.poster_path}`}
                  alt={movie.title}
                />
              </Link>
            </div>
          );
        })}
      </div>

      {loading && <p className={styles.loading}>Loading...</p>}
    </div>
  );
};

export default MovieList;

